{"/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/test.js":"/* istanbul instrument in package npmtest_generator_gulp_angular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/lib.npmtest_generator_gulp_angular.js":"/* istanbul instrument in package npmtest_generator_gulp_angular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_gulp_angular = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_gulp_angular = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-gulp-angular && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_gulp_angular */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_gulp_angular\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_gulp_angular.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_gulp_angular.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_gulp_angular.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_gulp_angular.__dirname + '/lib.npmtest_generator_gulp_angular.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/index.js":"'use strict';\n\nmodule.exports = {\n  app: require.resolve('./generators/app')\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/src/bower.js":"'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = function (GulpAngularGenerator) {\n\n  /**\n   * Prepare Bower overrides property to fix external bower.json with missing\n   * or incomplete main property (needed by wiredep)\n   */\n  GulpAngularGenerator.prototype.prepareBowerOverrides = function prepareBowerOverrides() {\n\n    var bowerOverrides = {};\n\n    if (this.props.ui.key === 'bootstrap') {\n\n      if (this.props.cssPreprocessor.extension === 'scss') {\n\n        bowerOverrides['bootstrap-sass'] = {\n          main: [\n            'assets/stylesheets/_bootstrap.scss',\n            'assets/fonts/bootstrap/glyphicons-halflings-regular.eot',\n            'assets/fonts/bootstrap/glyphicons-halflings-regular.svg',\n            'assets/fonts/bootstrap/glyphicons-halflings-regular.ttf',\n            'assets/fonts/bootstrap/glyphicons-halflings-regular.woff',\n            'assets/fonts/bootstrap/glyphicons-halflings-regular.woff2'\n          ]\n        };\n\n        if (this.props.bootstrapComponents.key === 'official') {\n          bowerOverrides['bootstrap-sass'].main.unshift('assets/javascripts/bootstrap.js');\n        }\n\n      } else {\n\n        bowerOverrides.bootstrap = {\n          main: [\n            'dist/fonts/glyphicons-halflings-regular.eot',\n            'dist/fonts/glyphicons-halflings-regular.svg',\n            'dist/fonts/glyphicons-halflings-regular.ttf',\n            'dist/fonts/glyphicons-halflings-regular.woff',\n            'dist/fonts/glyphicons-halflings-regular.woff2'\n          ]\n        };\n\n        if (this.props.bootstrapComponents.key === 'official') {\n          bowerOverrides.bootstrap.main.unshift('dist/js/bootstrap.js');\n        }\n\n      }\n\n      if (this.props.cssPreprocessor.key === 'noCssPrepro') {\n        bowerOverrides.bootstrap.main.unshift('dist/css/bootstrap.css');\n      }\n\n      if (this.props.cssPreprocessor.key === 'less') {\n        bowerOverrides.bootstrap.main.unshift('less/bootstrap.less');\n      }\n    }\n\n    if (this.props.router.key === 'new-router') {\n      bowerOverrides['angular-new-router'] = {\n        main: ['dist/router.es5.js']\n      };\n    }\n\n    if (_.isEmpty(bowerOverrides)) {\n      this.bowerOverrides = null;\n    } else {\n      this.bowerOverrides = JSON.stringify(bowerOverrides, null, 2)\n        .replace(/\\n/g, '\\n  ');\n    }\n\n  };\n\n  /**\n   * Compute wiredep exclusions depending on the props\n   */\n  GulpAngularGenerator.prototype.computeWiredepExclusions = function computeWiredepExclusions() {\n    this.wiredepExclusions = [];\n    if (this.props.jQuery.key === 'jqLite' || this.props.jQuery.key === 'zepto') {\n      this.wiredepExclusions.push('/jquery/');\n    }\n    if (this.props.ui.key === 'bootstrap') {\n      if (this.props.bootstrapComponents.key !== 'official') {\n        this.wiredepExclusions.push('/\\\\\\/bootstrap\\\\.js$/');\n        if (this.props.cssPreprocessor.extension === 'scss') {\n          this.wiredepExclusions.push('/\\\\\\/bootstrap-sass\\\\/.*\\\\.js/');\n        }\n      }\n      if (this.props.cssPreprocessor.key !== 'noCssPrepro') {\n        this.wiredepExclusions.push('/\\\\\\/bootstrap\\\\.css/');\n      }\n    } else if (this.props.ui.key === 'foundation') {\n      if (this.props.foundationComponents.key !== 'official') {\n        this.wiredepExclusions.push('/foundation\\\\.js/');\n      }\n      if (this.props.cssPreprocessor.extension === 'scss') {\n        this.wiredepExclusions.push('/foundation\\\\.css/');\n      }\n    }\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/src/files.js":"'use strict';\n\nvar path = require('path');\n\nvar files = require('../files.json');\n\n/**\n * Take a template file path and create a copy description object\n * Add an _ to the file's basename if it's a template\n * Look for the js preprocessor equivalent file and use it if exist\n */\nfunction resolvePaths(template) {\n  return function (file) {\n    var src = file;\n    var dest = file;\n\n    if (template) {\n      var basename = path.basename(file);\n      src = file.replace(basename, '_' + basename);\n    }\n\n    if (src.match(/\\.js$/)) {\n      var preprocessorFile = this.sourceRoot() + '/' + src.replace(/\\.js$/, '.' + this.props.jsPreprocessor.srcExtension);\n      if (this.fs.exists(preprocessorFile)) {\n        src = src.replace(/\\.js$/, '.' + this.props.jsPreprocessor.srcExtension);\n        dest = dest.replace(/\\.js$/, '.' + this.props.jsPreprocessor.extension);\n      }\n    }\n\n    return {\n      src: src,\n      dest: dest,\n      template: template\n    };\n  };\n}\n\nmodule.exports = function (GulpAngularGenerator) {\n\n  /**\n   * Prepare all files from files.json and add them to `this.files` as\n   * copy description object\n   */\n  GulpAngularGenerator.prototype.prepareFiles = function prepareFiles() {\n\n    this.files = []\n      .concat(files.staticFiles.map(resolvePaths(false), this))\n      .concat(files.templates.map(resolvePaths(true), this));\n\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/src/modules.js":"'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = function (GulpAngularGenerator) {\n\n  /**\n   * Compute Angular's module to load and format the dependency list to insert\n   */\n  GulpAngularGenerator.prototype.computeModules = function computeModules() {\n    var ngModules = this.props.angularModules.map(function (module) {\n      return module.module;\n    });\n\n    ngModules = ngModules.concat([\n      this.props.resource.module,\n      this.props.router.module,\n      this.props.ui.module,\n      this.props.bootstrapComponents.module,\n      this.props.foundationComponents.module\n    ]);\n\n    ngModules.push('toastr');\n\n    this.modulesDependencies = ngModules\n      .filter(_.isString)\n      .map(function (dependency) {\n        return '\\'' + dependency + '\\'';\n      })\n      .join(', ');\n  };\n\n  /**\n   * Simplify the model to simplify access to angular modules from the templates\n   */\n  GulpAngularGenerator.prototype.prepareAngularModules = function prepareAngularModules() {\n    this.angularModulesObject = {};\n\n    this.props.angularModules.forEach(function (module) {\n      this[module.key] = module.module;\n    }, this.angularModulesObject);\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/src/options.js":"'use strict';\n\nvar path = require('path');\n\nvar s = require('underscore.string');\n\nvar options = require('../options.json');\n\nmodule.exports = function (GulpAngularGenerator) {\n\n  /**\n   * Declares options in the generator (only used for the help messages)\n   */\n  GulpAngularGenerator.prototype.defineOptions = function defineOptions() {\n    options.forEach(function (option) {\n      this.option(option.name, {\n        type: global[option.type],\n        required: option.required,\n        desc: option.desc,\n        defaults: option.defaults\n      });\n    }, this);\n  };\n\n  /**\n   * Determine the appName either from the current directory or the parameter of the generator\n   */\n  GulpAngularGenerator.prototype.determineAppName = function determineAppName() {\n    this.appName = this.appName || path.basename(process.cwd());\n    this.appName = s.camelize(s.slugify(s.humanize(this.appName)));\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/src/paths.js":"'use strict';\n\nvar path = require('path');\nvar _ = require('lodash');\n\nvar utils = require('./utils.js');\n\nvar pathOptions = ['app-path', 'dist-path', 'e2e-path', 'tmp-path'];\n\nmodule.exports = function (GulpAngularGenerator) {\n\n  /**\n   * Check paths options to refuse absolutes ones and normalize them\n   */\n  GulpAngularGenerator.prototype.checkPaths = function checkPaths() {\n    pathOptions.forEach(function (name) {\n      if (utils.isAbsolutePath(this.options[name])) {\n        this.env.error(name + ' must be a relative path');\n      }\n      this.options[name] = utils.normalizePath(this.options[name]);\n    }, this);\n  };\n\n  /**\n   * Create the paths object from options and add them to props\n   */\n  GulpAngularGenerator.prototype.storePaths = function storePaths() {\n    this.props = _.merge(this.props, {\n      paths: {\n        src: this.options['app-path'],\n        dist: this.options['dist-path'],\n        e2e: this.options['e2e-path'],\n        tmp: this.options['tmp-path']\n      }\n    });\n  };\n\n  /**\n   * Compute paths deductible from the first ones\n   */\n  GulpAngularGenerator.prototype.computePaths = function computePaths() {\n    this.computedPaths = {\n      appToBower: path.relative(this.props.paths.src, '')\n    };\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/src/utils.js":"'use strict';\n\nvar path = require('path');\nvar _ = require('lodash');\nvar slash = require('slash');\n\n/**\n * Turn str into simplest form, remove trailing slash\n * example:\n * './path/to//some/folder/' (unix) will be normalized to 'path/to/some/folder'\n * 'path\\\\to\\\\some\\\\folder\\\\' (windows) will be normalized to 'path/to/some/folder'\n * @param  {String} str, can be unix style path ('/') or windows style path ('\\\\')\n * @return {String} normalized unix style path\n */\nfunction normalizePath(str) {\n  var trailingSlash;\n  if (path.sep === '/') {\n    trailingSlash = new RegExp(path.sep + '$');\n  } else {\n    trailingSlash = new RegExp(path.sep + path.sep + '$');\n  }\n  return slash(path.normalize(str).replace(trailingSlash, ''));\n}\n\n/**\n * Check if string is absolute path\n * @param  {String} str, can be unix style path ('/') or windows style path ('\\\\')\n * @return {Boolean} true if string is absolute path\n */\nfunction isAbsolutePath(str) {\n  return slash(path.resolve(str)) === normalizePath(str);\n}\n\n/**\n * Replace sourceFolder with destFolder in filePath\n * if filePath has any sourceFolder as prefix\n * choose longest match if there are multiple prefixes that match\n * @param  {String} filePath    File path to be altered\n * @param  {Object} folderPairs Hash of pairs of sourceFolder:destFolder\n *                              Similar to what stored in this.props.paths\n * @return {String}             new file path\n */\nfunction replacePrefix(filePath, folderPairs) {\n  var bestMatch = '';\n\n  _.forEach(folderPairs, function (destFolder, sourceFolder) {\n    if (filePath.indexOf(sourceFolder) === 0 && sourceFolder.length > bestMatch.length) {\n      bestMatch = sourceFolder;\n    }\n  });\n\n  if (bestMatch.length) {\n    return filePath.replace(bestMatch, folderPairs[bestMatch]);\n  } else {\n    return filePath;\n  }\n}\n\nmodule.exports = {\n  isAbsolutePath: isAbsolutePath,\n  normalizePath: normalizePath,\n  replacePrefix: replacePrefix\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/src/preprocessors.js":"'use strict';\n\nvar _ = require('lodash');\n\nfunction rejectWithRegexp(regexp) {\n  this.files = _.reject(this.files, function (file) {\n    return regexp.test(file.src);\n  });\n}\n\nmodule.exports = function (GulpAngularGenerator) {\n\n  /**\n   * List files extension processed by the generator\n   */\n  GulpAngularGenerator.prototype.computeProcessedFileExtension = function computeProcessedFileExtension() {\n    this.processedFileExtension = [\n      'html',\n      'css',\n      'js',\n      this.props.cssPreprocessor.extension,\n      this.props.jsPreprocessor.extension,\n      this.props.htmlPreprocessor.extension\n    ];\n    if (this.imageMin) {\n      this.processedFileExtension = this.processedFileExtension.concat(['jpg', 'png', 'gif', 'svg']);\n    }\n    this.processedFileExtension = _.chain(this.processedFileExtension)\n      .uniq()\n      .filter(_.isString)\n      .value()\n      .join(',');\n  };\n\n  /**\n   * Compute gulp inject task dependencies depending on js and css preprocessors\n   */\n  GulpAngularGenerator.prototype.computeWatchTaskDeps = function computeInjectTaskDeps() {\n    this.watchTaskDeps = [];\n\n    if (this.props.jsPreprocessor.srcExtension === 'es6' || this.props.jsPreprocessor.srcExtension === 'ts') {\n      this.watchTaskDeps.push('\\'scripts:watch\\'');\n    }\n\n    if (this.props.htmlPreprocessor.key !== 'noHtmlPrepro') {\n      this.watchTaskDeps.push('\\'markups\\'');\n    }\n\n    this.watchTaskDeps.push('\\'inject\\'');\n  };\n\n  /**\n   * Reject files from files.json\n   * Some important files are listed in the files.json even if they are not needed\n   * depending on options. This step reject these files.\n   */\n  GulpAngularGenerator.prototype.rejectFiles = function rejectFiles() {\n    if (this.props.cssPreprocessor.key === 'noCssPrepro') {\n      rejectWithRegexp.call(this, /styles\\.js/);\n    }\n\n    if (this.props.jsPreprocessor.key !== 'typescript') {\n      rejectWithRegexp.call(this, /typings\\.json/);\n      rejectWithRegexp.call(this, /tsconfig\\.json/);\n    }\n\n    if (this.props.jsPreprocessor.srcExtension === 'es6' || this.props.jsPreprocessor.key === 'typescript') {\n      rejectWithRegexp.call(this, /index\\.constants\\.js/);\n    }\n\n    if (this.props.htmlPreprocessor.key === 'noHtmlPrepro') {\n      rejectWithRegexp.call(this, /markups\\.js/);\n    }\n\n    if (this.props.jsPreprocessor.key !== 'noJsPrepro') {\n      rejectWithRegexp.call(this, /^(?!^e2e\\/).*spec\\.js/);\n    }\n  };\n\n  /**\n   * Copy additional lint files if needed\n   */\n  GulpAngularGenerator.prototype.lintCopies = function lintCopies() {\n    if (this.props.jsPreprocessor.key === 'coffee') {\n      this.files.push({\n        src: 'coffeelint.json',\n        dest: 'coffeelint.json',\n        template: false\n      });\n    }\n\n    if (this.props.jsPreprocessor.key === 'typescript') {\n      this.files.push({\n        src: 'tslint.json',\n        dest: 'tslint.json',\n        template: false\n      });\n    }\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/src/prompts.js":"'use strict';\n\nvar _ = require('lodash');\nvar chalk = require('chalk');\n\nvar prompts = require('../prompts.json');\nvar advancedPrompts = require('../advanced-prompts.json');\n\nvar mockPrompts = require('./mock-prompts.js');\n\nfunction logChoice(prompt, prop) {\n  var choice = _.findWhere(prompt.choices, {value: prop});\n  this.log('\\t*', choice.name);\n}\n\nmodule.exports = function (GulpAngularGenerator) {\n\n  /**\n   * Check Insight config\n   */\n  GulpAngularGenerator.prototype.checkInsight = function checkInsight() {\n\n    if (this.insight.optOut === undefined) {\n      var done = this.async();\n\n      this.insight.track('downloaded');\n\n      this.insight.askPermission(null, done);\n    }\n  };\n\n  /**\n   * Check if the default option is set, if it is, use defaults props and log them\n   */\n  GulpAngularGenerator.prototype.defaultOption = function defaultOption() {\n    if (this.options.default) {\n      this.props = _.merge(this.props, mockPrompts.defaults);\n\n      this.log('__________________________');\n      this.log('You use ' + chalk.green('--default') + ' option:');\n\n      _.forEach(this.props, function (propOrProps, key) {\n        var prompt = _.find(prompts, {name: key});\n        if (_.isArray(propOrProps)) {\n          propOrProps.forEach(function (prop) {\n            logChoice.call(this, prompt, prop);\n          }, this);\n        } else {\n          logChoice.call(this, prompt, propOrProps);\n        }\n      }, this);\n\n      this.log('__________________________\\n');\n    }\n  };\n\n  /**\n   * Check if there is a .yo-rc.json and ask for using it\n   */\n  GulpAngularGenerator.prototype.checkYoRc = function checkYoRc() {\n    var done = this.async();\n\n    if (this.config.get('props') && !this.options.default) {\n      this.prompt([{\n        type: 'confirm',\n        name: 'skipConfig',\n        message: 'Existing ' + chalk.green('.yo-rc') + ' configuration found, would you like to use it?',\n        default: true\n      }], function (answers) {\n        this.skipConfig = answers.skipConfig;\n\n        if (answers.skipConfig) {\n          this.props = _.merge(this.props, this.config.get('props'));\n        }\n\n        done();\n      }.bind(this));\n    } else {\n      this.skipConfig = false;\n      done();\n    }\n  };\n\n  /**\n   * Ask all questions from prompts.json\n   * Add conditional tests on those depending on first responses\n   * Complete responses with null answers for questions not asked\n   */\n  GulpAngularGenerator.prototype.askQuestions = function askQuestions() {\n    if (this.skipConfig || this.options.default) {\n      return;\n    }\n\n    var done = this.async();\n\n    _.findWhere(prompts, {name: 'bootstrapComponents'}).when = function (props) {\n      return props.ui.key === 'bootstrap';\n    };\n\n    _.findWhere(prompts, {name: 'foundationComponents'}).when = function (props) {\n      return props.ui.key === 'foundation';\n    };\n\n    this.prompt(prompts, function (props) {\n      if (props.ui.key !== 'bootstrap') {\n        props.bootstrapComponents = {\n          name: null,\n          version: null,\n          key: null,\n          module: null\n        };\n      }\n\n      if (props.ui.key !== 'foundation') {\n        props.foundationComponents = {\n          name: null,\n          version: null,\n          key: null,\n          module: null\n        };\n      }\n\n      this.props = _.merge(this.props, props);\n\n      done();\n    }.bind(this));\n  };\n\n  /**\n   * If the option is set, ask for advanced questions\n   */\n  GulpAngularGenerator.prototype.askAdvancedQuestions = function askAdvancedQuestions() {\n    this.includeModernizr = false;\n    this.imageMin = false;\n    this.qrCode = false;\n\n    if (this.skipConfig || !this.options.advanced) {\n      return;\n    }\n\n    var done = this.async();\n\n    this.prompt(advancedPrompts, function (props) {\n      this.props.advancedFeatures = props.advancedFeatures;\n\n      this.includeModernizr = this.props.advancedFeatures.indexOf('modernizr') >= 0;\n      this.imageMin = this.props.advancedFeatures.indexOf('imagemin') >= 0;\n      this.qrCode = this.props.advancedFeatures.indexOf('qrcode') >= 0;\n\n      done();\n    }.bind(this));\n  };\n\n  /**\n   * Send anonymously report usage statistics by Insight\n   */\n  GulpAngularGenerator.prototype.sendInsight = function sendInsight() {\n    var keyValues = [];\n    _.forEach(this.props, function (aProp) {\n      if (aProp.key) {\n        keyValues.push(aProp.key);\n      }\n    });\n    this.insight.track.apply(this.insight, keyValues);\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/src/mock-prompts.js":"'use strict';\n\n/**\n *\n * This modules reorganize the data from the prompts.json in order to be easily used in the tests\n *\n * It allows to avoid any duplications of the prompt values and prevent tests to use different\n * or outdated values compare to the real prompts values\n *\n */\n\nvar _ = require('lodash');\n\nvar prompts = require('../prompts.json');\n\nvar questions = [\n  'angularVersion',\n  'angularModules',\n  'jQuery',\n  'resource',\n  'router',\n  'ui',\n  'bootstrapComponents',\n  'foundationComponents',\n  'cssPreprocessor',\n  'jsPreprocessor',\n  'htmlPreprocessor'\n];\n\nvar model = {};\n\nquestions.forEach(function (question) {\n  model[question] = {\n    choices: _.findWhere(prompts, {name: question}).choices,\n    values: {}\n  };\n});\n\nmodel.angularVersion.choices.forEach(function (choice) {\n  var title = choice.name.substring(0, 3);\n  model.angularVersion.values[title] = choice.value;\n});\n\nmodel.angularModules.choices.forEach(function (choice) {\n  model.angularModules.values[choice.value.name] = choice.value;\n});\n\nmodel.jQuery.choices.forEach(function (choice) {\n  model.jQuery.values[choice.value.key] = choice.value;\n});\n\nmodel.resource.choices.forEach(function (choice) {\n  model.resource.values[choice.value.key] = choice.value;\n});\n\nmodel.router.choices.forEach(function (choice) {\n  model.router.values[choice.value.key] = choice.value;\n});\n\nmodel.ui.choices.forEach(function (choice) {\n  model.ui.values[choice.value.key] = choice.value;\n});\n\nmodel.bootstrapComponents.choices.forEach(function (choice) {\n  model.bootstrapComponents.values[choice.value.key] = choice.value;\n});\n\nmodel.foundationComponents.choices.forEach(function (choice) {\n  model.foundationComponents.values[choice.value.key] = choice.value;\n});\n\nmodel.cssPreprocessor.choices.forEach(function (choice) {\n  model.cssPreprocessor.values[choice.value.key] = choice.value;\n});\n\nmodel.jsPreprocessor.choices.forEach(function (choice) {\n  model.jsPreprocessor.values[choice.value.key] = choice.value;\n});\n\nmodel.htmlPreprocessor.choices.forEach(function (choice) {\n  model.htmlPreprocessor.values[choice.value.key] = choice.value;\n});\n\nmodule.exports = {\n  prompts: model,\n  defaults: {\n    angularVersion: model.angularVersion.values['1.5'],\n    angularModules: _.pluck(model.angularModules.choices, 'value'),\n    jQuery: model.jQuery.values.jquery2,\n    resource: model.resource.values['angular-resource'],\n    router: model.router.values['ui-router'],\n    ui: model.ui.values.bootstrap,\n    bootstrapComponents: model.bootstrapComponents.values['ui-bootstrap'],\n    foundationComponents: model.foundationComponents.values.noFoundationComponents,\n    cssPreprocessor: model.cssPreprocessor.values['node-sass'],\n    jsPreprocessor: model.jsPreprocessor.values.noJsPrepro,\n    htmlPreprocessor: model.htmlPreprocessor.values.noHtmlPrepro\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/src/router.js":"'use strict';\n\n\nmodule.exports = function (GulpAngularGenerator) {\n\n  /**\n   * Configure routing by defining what to add in the index.html and what in the app.js\n   */\n  GulpAngularGenerator.prototype.computeRouter = function computeRouter() {\n    var routerPartialSrc = 'src/app/main/__' + this.props.ui.key + '.html';\n\n    if (this.props.router.key === 'angular-route') {\n      this.routerHtml = '<div ng-view></div>';\n      this.files.push({\n        src: 'src/app/_ngroute/__ngroute.' + this.props.jsPreprocessor.srcExtension,\n        dest: 'src/app/index.route.' + this.props.jsPreprocessor.extension,\n        template: true\n      });\n    } else if (this.props.router.key === 'ui-router') {\n      this.routerHtml = '<div ui-view></div>';\n      this.files.push({\n        src: 'src/app/_uirouter/__uirouter.' + this.props.jsPreprocessor.srcExtension,\n        dest: 'src/app/index.route.' + this.props.jsPreprocessor.extension,\n        template: true\n      });\n    } else if (this.props.router.key === 'new-router') {\n      this.routerHtml = '<div ng-viewport ng-controller=\"RouterController\"></div>';\n      this.files.push({\n        src: 'src/app/_newrouter/__newrouter.' + this.props.jsPreprocessor.srcExtension,\n        dest: 'src/app/index.route.' + this.props.jsPreprocessor.extension,\n        template: true\n      });\n    } else {\n      this.routerHtml = this.fs.read(this.templatePath(routerPartialSrc));\n      this.routerHtml = this.routerHtml.replace(\n        /^<div ([^>]*)>/,\n        '<div $1 ng-controller=\"MainController as main\">'\n      );\n\n      this.routerHtml = this.routerHtml.replace(/\\n/g, '\\n    ');\n    }\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/src/techs.js":"'use strict';\n\nvar _ = require('lodash');\n\nvar listTechs = require('../techs.json');\n\nvar alwaysUsedTechs = ['angular', 'browsersync', 'gulp', 'jasmine', 'karma', 'protractor'];\n\nmodule.exports = function (GulpAngularGenerator) {\n\n  /**\n   * Format list techs used to generate app included in main view of sample\n   */\n  GulpAngularGenerator.prototype.computeTechs = function computeTechs() {\n    var usedTechs = alwaysUsedTechs.concat([\n      this.props.jQuery.name,\n      this.props.ui.key,\n      this.props.bootstrapComponents.key,\n      this.props.foundationComponents.key,\n      this.props.cssPreprocessor.key,\n      this.props.jsPreprocessor.key,\n      this.props.htmlPreprocessor.key\n    ])\n      .filter(_.isString)\n      .filter(function (tech) {\n        return listTechs[tech] !== undefined;\n      });\n\n    var techsContent = _.map(usedTechs, function (value) {\n      return listTechs[value];\n    });\n\n    //TODO handle coffee version\n    this.technologies = JSON.stringify(techsContent, null, 2)\n      .replace(/'/g, '\\\\\\'')\n      .replace(/\"/g, '\\'')\n      .replace(/\\n/g, '\\n    ');\n\n    usedTechs.forEach(function (value) {\n      var path = 'src/assets/images/' + listTechs[value].logo;\n\n      this.files.push({\n        src: path,\n        dest: path,\n        template: false\n      });\n    }, this);\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/src/ui.js":"'use strict';\n\nmodule.exports = function (GulpAngularGenerator) {\n\n  /**\n   * Add files of the navbar and the main view depending on the ui framework\n   * and the css preprocessor\n   */\n  GulpAngularGenerator.prototype.uiFiles = function uiFiles() {\n    this.files.push({\n      src: 'src/app/components/navbar/__' + this.props.ui.key + '-navbar.html',\n      dest: 'src/app/components/navbar/navbar.html',\n      template: false\n    });\n\n    if (this.props.router.module !== null) {\n      this.files.push({\n        src: 'src/app/main/__' + this.props.ui.key + '.html',\n        dest: 'src/app/main/main.html',\n        template: true\n      });\n    }\n\n    this.files.push({\n      src: 'src/app/_' + this.props.ui.key + '/__' + this.props.ui.key + '-index.' + this.props.cssPreprocessor.extension,\n      dest: 'src/app/index.' + this.props.cssPreprocessor.extension,\n      template: true\n    });\n\n    this.files.push({\n      src: 'src/app/components/malarkey/__malarkey.' + this.props.cssPreprocessor.extension,\n      dest: 'src/app/components/malarkey/malarkey.' + this.props.cssPreprocessor.extension,\n      template: false\n    });\n\n    this.files.push({\n      src: 'src/app/components/navbar/__navbar.' + this.props.cssPreprocessor.extension,\n      dest: 'src/app/components/navbar/navbar.' + this.props.cssPreprocessor.extension,\n      template: false\n    });\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/src/write.js":"'use strict';\n\nvar chalk = require('chalk');\nvar utils = require('./utils');\n\nmodule.exports = function (GulpAngularGenerator) {\n\n  /**\n   * Write computed props in the .yo-rc.json\n   */\n  GulpAngularGenerator.prototype.writeYoRc = function writeYoRc() {\n    this.config.set('version', this.version);\n    this.config.set('props', this.props);\n  };\n\n  /**\n   * Pass through each files and actually copy them\n   */\n  GulpAngularGenerator.prototype.writeFiles = function writeFiles() {\n    this.files.forEach(function (file) {\n      var dest = utils.replacePrefix(file.dest, this.props.paths);\n      try {\n        if (file.template) {\n          this.fs.copyTpl(this.templatePath(file.src), this.destinationPath(dest), this);\n        } else {\n          this.fs.copy(this.templatePath(file.src), this.destinationPath(dest));\n        }\n      } catch (error) {\n        console.error('Template processing error on file', file.src); // eslint-disable-line no-console\n        throw error;\n      }\n    }, this);\n  };\n\n  /**\n   * Launch npm and bower installs unless they are skipped\n   */\n  GulpAngularGenerator.prototype.install = function install() {\n\n    this.installDependencies({\n      skipInstall: this.options['skip-install'],\n      skipMessage: this.options['skip-message']\n    });\n\n    if (this.props.jsPreprocessor.key === 'typescript') {\n      this.spawnCommandSync('typings', ['install', '-so']);\n    }\n  };\n\n  /**\n   * End message\n   */\n  GulpAngularGenerator.prototype.end = function end() {\n\n    this.log('It\\'s time to use Gulp tasks:');\n    this.log('- `$ ' + chalk.yellow.bold('gulp') + '` to build an optimized version of your application in folder ' + this.props.paths.dist);\n    this.log('- `$ ' + chalk.yellow.bold('gulp serve') + '` to start BrowserSync server on your source files with live reload');\n    this.log('- `$ ' + chalk.yellow.bold('gulp serve:dist') + '` to start BrowserSync server on your optimized application without live reload');\n    this.log('- `$ ' + chalk.yellow.bold('gulp test') + '` to run your unit tests with Karma');\n    this.log('- `$ ' + chalk.yellow.bold('gulp test:auto') + '` to run your unit tests with Karma in watch mode');\n    this.log('- `$ ' + chalk.yellow.bold('gulp protractor') + '` to launch your e2e tests with Protractor');\n    this.log('- `$ ' + chalk.yellow.bold('gulp protractor:dist') + '` to launch your e2e tests with Protractor on the dist files');\n    this.log('\\nMore details are available in docs and recipes');\n    this.log('https://github.com/Swiip/generator-gulp-angular/tree/master/docs');\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/templates/gulpfile.js":"/**\n *  Welcome to your gulpfile!\n *  The gulp tasks are split into several files in the gulp directory\n *  because putting it all here was too long\n */\n\n'use strict';\n\nvar fs = require('fs');\nvar gulp = require('gulp');\n\n/**\n *  This will load all js or coffee files in the gulp directory\n *  in order to load all gulp tasks\n */\nfs.readdirSync('./gulp').filter(function(file) {\n  return (/\\.(js|coffee)$/i).test(file);\n}).map(function(file) {\n  require('./gulp/' + file);\n});\n\n\n/**\n *  Default task clean temporaries directories and launch the\n *  main optimization build task\n */\ngulp.task('default', ['clean'], function () {\n  gulp.start('build');\n});\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/templates/_karma.conf.js":"'use strict';\n\nvar path = require('path');\nvar conf = require('./gulp/conf');\n\nvar _ = require('lodash');\nvar wiredep = require('wiredep');\n\nvar pathSrcHtml = [\n<% if (props.htmlPreprocessor.key === 'noHtmlPrepro') { -%>\n  path.join(conf.paths.src, '/**/*.html')\n<% } else { -%>\n  path.join(conf.paths.tmp, '/serve/**/*.html'),\n  path.join(conf.paths.src, '/**/*.html')\n<% } -%>\n];\n\nfunction listFiles() {\n  var wiredepOptions = _.extend({}, conf.wiredep, {\n    dependencies: true,\n    devDependencies: true\n  });\n\n  var patterns = wiredep(wiredepOptions).js\n    .concat([\n<% if (props.jsPreprocessor.key === 'noJsPrepro') { -%>\n      path.join(conf.paths.src, '/app/**/*.module.js'),\n      path.join(conf.paths.src, '/app/**/*.js'),\n      path.join(conf.paths.src, '/**/*.spec.js'),\n      path.join(conf.paths.src, '/**/*.mock.js'),\n<% } else if (props.jsPreprocessor.key === 'coffee') { -%>\n      path.join(conf.paths.tmp, '/serve/app/**/*.module.js'),\n      path.join(conf.paths.tmp, '/serve/app/**/*.js'),\n      path.join(conf.paths.tmp, '/**/*.spec.js'),\n      path.join(conf.paths.tmp, '/**/*.mock.js'),\n<% } else { -%>\n      path.join(conf.paths.tmp, '/serve/app/index.module.js'),\n<% } -%>\n    ])\n    .concat(pathSrcHtml);\n\n  var files = patterns.map(function(pattern) {\n    return {\n      pattern: pattern\n    };\n  });\n  files.push({\n    pattern: path.join(conf.paths.src, '/assets/**/*'),\n    included: false,\n    served: true,\n    watched: false\n  });\n  return files;\n}\n\nmodule.exports = function(config) {\n\n  var configuration = {\n    files: listFiles(),\n\n    singleRun: true,\n\n    autoWatch: false,\n\n    ngHtml2JsPreprocessor: {\n<% if (props.htmlPreprocessor.key === 'noHtmlPrepro') { -%>\n      stripPrefix: conf.paths.src + '/',\n<% } else { -%>\n      stripPrefix: '(' + conf.paths.src + '/|' + conf.paths.tmp + '/serve/)',\n<% } -%>\n      moduleName: '<%- appName %>'\n    },\n\n    logLevel: 'WARN',\n\n<% if (props.jsPreprocessor.key === 'noJsPrepro' || props.jsPreprocessor.key === 'coffee') { -%>\n    frameworks: ['phantomjs-shim', 'jasmine', 'angular-filesort'],\n\n    angularFilesort: {\n<%   if (props.jsPreprocessor.key === 'noJsPrepro') { -%>\n      whitelist: [path.join(conf.paths.src, '/**/!(*.html|*.spec|*.mock).js')]\n<%   } else { -%>\n      whitelist: [path.join(conf.paths.tmp, '/**/!(*.html|*.spec|*.mock).js')]\n<%   } -%>\n    },\n<% } else { -%>\n    frameworks: ['phantomjs-shim', 'jasmine'],\n<% } -%>\n\n<% if(props.jsPreprocessor.key === 'traceur') { -%>\n    browsers : ['Chrome'],\n\n    plugins : [\n      'karma-chrome-launcher',\n<% } else { -%>\n    browsers : ['PhantomJS'],\n\n    plugins : [\n      'karma-phantomjs-launcher',\n<% } if (props.jsPreprocessor.key === 'noJsPrepro' || props.jsPreprocessor.key === 'coffee') { -%>\n      'karma-angular-filesort',\n<% } -%>\n      'karma-phantomjs-shim',\n      'karma-coverage',\n      'karma-jasmine',\n      'karma-ng-html2js-preprocessor'\n    ],\n\n    coverageReporter: {\n      type : 'html',\n      dir : 'coverage/'\n    },\n\n    reporters: ['progress'],\n\n    proxies: {\n      '/assets/': path.join('/base/', conf.paths.src, '/assets/')\n    }\n  };\n\n  // This is the default preprocessors configuration for a usage with Karma cli\n  // The coverage preprocessor is added in gulp/unit-test.js only for single tests\n  // It was not possible to do it there because karma doesn't let us now if we are\n  // running a single test or not\n  configuration.preprocessors = {};\n  pathSrcHtml.forEach(function(path) {\n    configuration.preprocessors[path] = ['ng-html2js'];\n  });\n\n  // This block is needed to execute Chrome on Travis\n  // If you ever plan to use Chrome and Travis, you can keep it\n  // If not, you can safely remove it\n  // https://github.com/karma-runner/karma/issues/1144#issuecomment-53633076\n  if(configuration.browsers[0] === 'Chrome' && process.env.TRAVIS) {\n    configuration.customLaunchers = {\n      'chrome-travis-ci': {\n        base: 'Chrome',\n        flags: ['--no-sandbox']\n      }\n    };\n    configuration.browsers = ['chrome-travis-ci'];\n  }\n\n  config.set(configuration);\n};\n","/home/travis/build/npmtest/node-npmtest-generator-gulp-angular/node_modules/generator-gulp-angular/generators/app/templates/protractor.conf.js":"'use strict';\n\nvar paths = require('./.yo-rc.json')['generator-gulp-angular'].props.paths;\n\n// An example configuration file.\nexports.config = {\n  // The address of a running selenium server.\n  //seleniumAddress: 'http://localhost:4444/wd/hub',\n  //seleniumServerJar: deprecated, this should be set on node_modules/protractor/config.json\n\n  // Capabilities to be passed to the webdriver instance.\n  capabilities: {\n    'browserName': 'chrome'\n  },\n\n  baseUrl: 'http://localhost:3000',\n\n  // Spec patterns are relative to the current working directory when\n  // protractor is called.\n  specs: [paths.e2e + '/**/*.js'],\n\n  // Options to be passed to Jasmine-node.\n  jasmineNodeOpts: {\n    showColors: true,\n    defaultTimeoutInterval: 30000\n  }\n};\n"}